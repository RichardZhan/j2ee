buildscript {
  repositories {
  //使用Maven本地缓存
	mavenLocal()
	maven {url "http://120.25.156.197:8081/nexus/content/groups/public/"}
    maven {
		/*
		credentials {
			username 'aaron'
			password 'aaron123'
		}*/
		url "http://192.168.1.112:8081/nexus/content/groups/public/"
	}
	maven {
		url "http://maven.aliyun.com/nexus/content/groups/public/"
		name = "Alibaba maven库"
	}
  	jcenter()
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
  }
  dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
	}
}

allprojects {
    apply plugin: 'java'

    // JDK 8
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // 全局属性设置
    ext {
        // java文件编码方式设置为utf-8
        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'
        javadoc.options.encoding = 'utf-8'
    }
	
	repositories {
		//使用Maven本地缓存
		mavenLocal()		
        maven {
			credentials {
				username 'aaron'
				password 'aaron123'
			}			
			url "http://192.168.1.112:8081/nexus/content/groups/public/"		
        }
		/*
		def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'
        all { ArtifactRepository repo ->
            def url = repo.url.toString()
            if ((repo instanceof MavenArtifactRepository) && (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com'))) {
                project.logger.lifecycle 'Repository ${repo.url} replaced by $REPOSITORY_URL .'
                remove repo
            }
        }
		*/
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
		maven {
			url "http://repo1.maven.org/maven2"
		}		
		maven {            
			url "https://repo.spring.io/libs-release"
        }
		maven { url 'http://repo.spring.io/snapshot' }
		maven { url "http://repo.spring.io/milestone" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://repository.jboss.org/nexus/content/groups/public/"
            name = "jboss"
        }
		jcenter()
		mavenCentral()					
    }
	
}

configurations {
    //compile.exclude module: "spring-boot-starter-tomcat"
}

// Apply the java plugin to add support for Java
apply plugin:'idea'
//apply plugin: 'war'
apply plugin: 'spring-boot'

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    /*
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter:1.3.0.RELEASE'
    compile 'org.springframework:spring-webmvc:4.1.6.RELEASE'
    */

    compile("org.springframework.boot:spring-boot-starter-web")
    runtime 'org.springframework.boot:spring-boot-devtools'
    runtime 'org.springframework.boot:spring-boot-starter-tomcat'
    //providedCompile 'org.springframework.boot:spring-boot-starter-tomcat'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile 'org.apache.tomcat.embed:tomcat-embed-jasper'
	compile 'javax.servlet:jstl'
    //compile 'javax.servlet.jsp:jsp-api:2.2'
    //compile 'javax.servlet:javax.servlet-api:3.1.0'
    //compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.4.1.RELEASE'
	//runtime 'com.h2database:h2:1.4.190'
	
    //compile 'org.springframework.boot:spring-boot-starter-jetty:1.4.1.RELEASE'
    testCompile 'junit:junit:4.12'
}
