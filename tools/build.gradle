buildscript {
	repositories {
		mavenLocal()
		maven {
			url "http://192.168.1.112:8081/nexus/content/groups/public/"
		}
		maven {
			url "http://maven.aliyun.com/nexus/content/groups/public/"
		}
		maven { url"https://repo.spring.io/libs-release" }
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "http://repo.spring.io/milestone" }
		jcenter()
	}
	dependencies {
		//classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'maven-publish'

allprojects {

	// JDK 8
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	/*com.sun.image.codec.jpeg不存在*/
	compileJava {
		options.fork = true
		options.forkOptions.executable = "javac" // assumes that javac is on PATH
		options.compilerArgs << "-XDignore.symbol.file"
	}


	// 全局属性设置
	ext {
		// java文件编码方式设置为utf-8
		compileJava.options.encoding = 'UTF-8'
		compileTestJava.options.encoding = 'UTF-8'
		javadoc.options.encoding = 'utf-8'
	}

	repositories {

		//file("C:/Program Files/Java/jdk1.8.0_92/jre/lib/rt.jar")
		//flatDir { dirs "../lib" }
		//使用Maven本地缓存
		mavenLocal()
		maven {
			credentials {
				username 'aaron'
				password 'aaron123'
			}
			url "http://192.168.1.112:8081/nexus/content/groups/public/"
		}
		/*
		def REPOSITORY_URL = 'http://maven.aliyun.com/nexus/content/groups/public/'
        all { ArtifactRepository repo ->
            def url = repo.url.toString()
            if ((repo instanceof MavenArtifactRepository) && (url.startsWith('https://repo1.maven.org/maven2') || url.startsWith('https://jcenter.bintray.com'))) {
                project.logger.lifecycle 'Repository ${repo.url} replaced by $REPOSITORY_URL .'
                remove repo
            }
        }
		*/
		maven {
			url "http://maven.aliyun.com/nexus/content/groups/public/"
		}
		maven {
			url "http://repo1.maven.org/maven2"
		}
		maven {
			url "https://repo.spring.io/libs-release"
		}
		maven { url 'http://repo.spring.io/snapshot' }
		maven { url "http://repo.spring.io/milestone" }
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			url "http://repository.jboss.org/nexus/content/groups/public/"
			name = "jboss"
		}
		jcenter()
		mavenCentral()
	}

}


version = '2.0.0.RELEASE'

jar {
    manifest {
        attributes 'Implementation-Title': 'tools',
                   'Implementation-Version': version
    }
}

ext {
	springVersion="4.2.4.RELEASE"
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'

	compile "commons-io:commons-io:2.5"
	compile "commons-lang:commons-lang:2.6"
	compile "org.springframework:spring-context:$springVersion"
	compile "org.springframework:spring-web:$springVersion"
	compile 'commons-fileupload:commons-fileupload:1.3.1'
	compile "javax.servlet:javax.servlet-api:3.1.0"
	compile 'dom4j:dom4j:1.6.1'
	compile 'commons-net:commons-net:3.4'
	compile 'com.google.code.gson:gson:2.7'
	compile 'commons-codec:commons-codec:1.10'
	compile 'net.sf.json-lib:json-lib:2.4:jdk15'
	compile 'org.mybatis:mybatis-spring:1.2.3'
	compile 'com.github.miemiedev:mybatis-paginator:1.2.17'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.7.4'
	//compile 'log4j:log4j:1.2.8'
	
    testCompile group: 'junit', name: 'junit', version: '4.+'
	/*
	compile 'org.slf4j:slf4j-log4j12:1.7.13'
	compile 'org.freemarker:freemarker:2.3.23'
	
	compile "org.springframework:spring-context-support:$springVersion"
	compile "org.springframework:spring-core:$springVersion"
	compile "org.springframework:spring-beans:$springVersion"
	compile "org.springframework:spring-webmvc:$springVersion"
	compile "org.springframework:spring-test:$springVersion"
	compile "org.springframework:spring-jdbc:$springVersion"
	compile "org.springframework:spring-aop:$springVersion"
	compile "org.springframework:spring-tx:$springVersion"
	compile "org.springframework:spring-orm:$springVersion"
	//compile "org.springframework:spring-aspects:$springVersion"
	compile 'aspectj:aspectjrt:1.5.4'
	compile 'org.springframework:spring-remoting:2.0.8'
	compile "org.springframework:spring-jms:$springVersion"
	compile 'commons-beanutils:commons-beanutils:1.9.2'
	compile "org.springframework:spring-expression:$springVersion"
	compile 'org.springframework.data:spring-data-redis:1.6.2.RELEASE'
	compile "org.apache.commons:commons-lang3:3.4"
	compile 'commons-io:commons-io:2.4'
	compile 'commons-collections:commons-collections:3.2.2'
	compile 'redis.clients:jedis:2.8.0'
	compile 'org.aspectj:aspectjweaver:1.8.7'
	compile 'org.apache.httpcomponents:httpclient:4.5.1'
	compile 'cglib:cglib:3.2.0'
	*/
}

task apiJar(type: Jar) {
    baseName "tools"
    version  "$version"
    
    from sourceSets.main.output
    //exclude '**/impl/**'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    //classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
	repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            if(version.endsWith('.SNAPSHOT')) {
                //url "http://192.168.1.112:8081/nexus/content/repositories/aaron-snapshots/"
				url "http://192.168.1.112:8081/nexus/content/repositories/snapshots/"
            } else {
                //url "http://192.168.1.112:8081/nexus/content/repositories/aaron-release/"
				url "http://192.168.1.112:8081/nexus/content/repositories/releases/"
            }
			credentials {
				username = 'deployment'
				password = 'deployment123'
			}
        }
    }

    publications {
		mavenJava(MavenPublication) {        	
			from components.java
			
			artifact sourceJar {
                classifier "sources"
            }
            
            /*
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
            */
            
			groupId "com.aaron"
			artifactId	"tools"
			version 	"$version" 
        }       
    }
    
    sourceSets {
	    main {
	        java {
	            srcDirs = ['src/main/java']
	        }
	        //没错 我同时把resource指向了java目录 这样就可以收录java目录中的资源文件了
	        resources {
	            srcDirs = ['src/main/resources','src/main/java']
	        }
	    }
	}
}


